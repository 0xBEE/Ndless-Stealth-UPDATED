#include <syscall-decls.h>
#include <syscall-list.h>
#include <syscall.h>

//This file has been autogenerated my mkStubs.php

extern "C" {
__attribute__((section(".text"))) int savedlr_stack[10];
__attribute__((section(".text"))) int savedlr_stack_nr = 0;
NUC_FILE* nuc_fopen(const char *p1)
{
	return syscall<e_fopen, NUC_FILE*>(p1);
}
int nuc_fread(void *p1, size_t p2, size_t p3, NUC_FILE *p4)
{
	return syscall<e_fread, int>(p1,p2,p3,p4);
}
int nuc_fwrite(void *p1, size_t p2, size_t p3, NUC_FILE *p4)
{
	return syscall<e_fwrite, int>(p1,p2,p3,p4);
}
int nuc_fclose(NUC_FILE *p1)
{
	return syscall<e_fclose, int>(p1);
}
char* nuc_fgets(char *p1, int p2, NUC_FILE *p3)
{
	return syscall<e_fgets, char*>(p1,p2,p3);
}
void ascii2utf16(void *p1, const char *p2, int p3)
{
	return syscall<e_ascii2utf16, void>(p1,p2,p3);
}
int TCT_Local_Control_Interrupts(int p1)
{
	return syscall<e_TCT_Local_Control_Interrupts, int>(p1);
}
int nuc_stat(const char *p1, struct nuc_stat *p2)
{
	return syscall<e_stat, int>(p1,p2);
}
int TCC_Terminate_Task(NU_TASK *p1)
{
	return syscall<e_TCC_Terminate_Task, int>(p1);
}
int NU_Get_First(struct dstat *p1, const char *p2)
{
	return syscall<e_NU_Get_First, int>(p1,p2);
}
int NU_Get_Next(struct dstat *p1)
{
	return syscall<e_NU_Get_Next, int>(p1);
}
void NU_Done(struct dstat *p1)
{
	return syscall<e_NU_Done, void>(p1);
}
void show_dialog_box2_(int p1, const char *p2, const char *p3, char *p4)
{
	return syscall<e_show_dialog_box2_, void>(p1,p2,p3,p4);
}
int nuc_fseek(NUC_FILE *p1, long p2, int p3)
{
	return syscall<e_fseek, int>(p1,p2,p3);
}
int NU_Current_Dir(const char *p1, const char *p2)
{
	return syscall<e_NU_Current_Dir, int>(p1,p2);
}
int NU_Set_Current_Dir(const char *p1)
{
	return syscall<e_NU_Set_Current_Dir, int>(p1);
}
int touchpad_read(unsigned char p1, unsigned char p2, void *p3)
{
	return syscall<e_touchpad_read, int>(p1,p2,p3);
}
int touchpad_write(unsigned char p1, unsigned char p2, void *p3)
{
	return syscall<e_touchpad_write, int>(p1,p2,p3);
}
NU_TASK* TCC_Current_Task_Pointer()
{
	return syscall<e_TCC_Current_Task_Pointer, NU_TASK*>();
}
PCFD NU_Open(char *p1, uint32_t p2, uint32_t p3)
{
	return syscall<e_NU_Open, PCFD>(p1,p2,p3);
}
int NU_Close(PCFD p1)
{
	return syscall<e_NU_Close, int>(p1);
}
int NU_Truncate(PCFD p1, long int p2)
{
	return syscall<e_NU_Truncate, int>(p1,p2);
}
__attribute__((naked)) int _show_msgbox_2b(int p1, const char *p2, const char *p3, const char *p4, int p5, const char *p6, int p7, char p8[8])
{
	asm volatile("adr r4, savedlr_stack\n"
				"adr r5, savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"swi %[nr]\n"
				"adr r4, savedlr_stack\n"
				"adr r5, savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"bx lr" :: [nr] "i" (e__show_msgbox_2b));
}
__attribute__((naked)) int _show_msgbox_3b(int p1, const char *p2, const char *p3, const char *p4, int p5, const char *p6, int p7, const char *p8, int p9, char p10[8])
{
	asm volatile("adr r4, savedlr_stack\n"
				"adr r5, savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"swi %[nr]\n"
				"adr r4, savedlr_stack\n"
				"adr r5, savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"bx lr" :: [nr] "i" (e__show_msgbox_3b));
}
NUC_DIR* nuc_opendir(const char *p1)
{
	return syscall<e_opendir, NUC_DIR*>(p1);
}
struct nuc_dirent* nuc_readdir(NUC_DIR *p1)
{
	return syscall<e_readdir, struct nuc_dirent*>(p1);
}
int nuc_closedir(NUC_DIR *p1)
{
	return syscall<e_closedir, int>(p1);
}
void luaL_register(lua_State *p1, const char *p2, const luaL_Reg *p3)
{
	return syscall<e_luaL_register, void>(p1,p2,p3);
}
const char* luaL_checklstring(lua_State *p1, int p2, size_t *p3)
{
	return syscall<e_luaL_checklstring, const char*>(p1,p2,p3);
}
void refresh_homescr()
{
	return syscall<e_refresh_homescr, void>();
}
void refresh_docbrowser(int p1)
{
	return syscall<e_refresh_docbrowser, void>(p1);
}
__attribute__((naked)) int _show_1NumericInput(int p1, const char *p2, const char *p3, const char *p4, int *p5, int p6, int p7, int p8)
{
	asm volatile("adr r4, savedlr_stack\n"
				"adr r5, savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"swi %[nr]\n"
				"adr r4, savedlr_stack\n"
				"adr r5, savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"bx lr" :: [nr] "i" (e__show_1NumericInput));
}
__attribute__((naked)) int _show_2NumericInput(int p1, const char *p2, const char *p3, const char *p4, int *p5, int p6, int p7, int p8, const char *p9, int *p10, int p11, int p12, int p13)
{
	asm volatile("adr r4, savedlr_stack\n"
				"adr r5, savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"swi %[nr]\n"
				"adr r4, savedlr_stack\n"
				"adr r5, savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"bx lr" :: [nr] "i" (e__show_2NumericInput));
}
int _show_msgUserInput(int p1, String *p2, const char *p3, const char *p4)
{
	return syscall<e__show_msgUserInput, int>(p1,p2,p3,p4);
}
String string_new()
{
	return syscall<e_string_new, String>();
}
void string_free(String p1)
{
	return syscall<e_string_free, void>(p1);
}
char* string_to_ascii(String p1)
{
	return syscall<e_string_to_ascii, char*>(p1);
}
void string_lower(String p1)
{
	return syscall<e_string_lower, void>(p1);
}
char string_charAt(String p1, int p2)
{
	return syscall<e_string_charAt, char>(p1,p2);
}
int string_concat_utf16(String p1, const char* p2)
{
	return syscall<e_string_concat_utf16, int>(p1,p2);
}
int string_set_ascii(String p1, const char *p2)
{
	return syscall<e_string_set_ascii, int>(p1,p2);
}
int string_set_utf16(String p1, const char *p2)
{
	return syscall<e_string_set_utf16, int>(p1,p2);
}
int string_indexOf_utf16(String p1, int p2, const char *p3)
{
	return syscall<e_string_indexOf_utf16, int>(p1,p2,p3);
}
int string_last_indexOf_utf16(String p1, int p2, const char *p3)
{
	return syscall<e_string_last_indexOf_utf16, int>(p1,p2,p3);
}
int string_compareTo_utf16(String p1, const char *p2)
{
	return syscall<e_string_compareTo_utf16, int>(p1,p2);
}
char* string_substring(String p1, String p2, int p3, int p4)
{
	return syscall<e_string_substring, char*>(p1,p2,p3,p4);
}
void string_erase(String p1, int p2)
{
	return syscall<e_string_erase, void>(p1,p2);
}
void string_truncate(String p1, int p2)
{
	return syscall<e_string_truncate, void>(p1,p2);
}
char* string_subtrsing_utf16(String p1, const char *p2, int *p3)
{
	return syscall<e_string_substring_utf16, char*>(p1,p2,p3);
}
int string_insert_replace_utf16(String p1, const char *p2, int p3, int p4)
{
	return syscall<e_string_insert_replace_utf16, int>(p1,p2,p3,p4);
}
int string_insert_utf16(String p1, const char *p2, int p3)
{
	return syscall<e_string_insert_utf16, int>(p1,p2,p3);
}
const char* get_documents_dir()
{
	return syscall<e_get_documents_dir, const char*>();
}
void gui_gc_setColor(Gc p1, int p2)
{
	return syscall<e_gui_gc_setColor, void>(p1,p2);
}
void gui_gc_setFont(Gc p1, gui_gc_Font p2)
{
	return syscall<e_gui_gc_setFont, void>(p1,p2);
}
__attribute__((naked)) void gui_gc_drawString(Gc p1, char *p2, int p3, int p4, gui_gc_StringMode p5)
{
	asm volatile("adr r4, savedlr_stack\n"
				"adr r5, savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"swi %[nr]\n"
				"adr r4, savedlr_stack\n"
				"adr r5, savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"bx lr" :: [nr] "i" (e_gui_gc_drawString));
}
}